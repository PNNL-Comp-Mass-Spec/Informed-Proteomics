<?xml version="1.0"?>
<doc>
<assembly>
<name>
PHRPReader
</name>
</assembly>
<members>
<member name="P:PHRPReader.clsSeqInfo.SeqID">
	<summary>
 Sequence ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsSeqInfo.ModCount">
	<summary>
 Number of modifications
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsSeqInfo.ModDescription">
	<summary>
 Comma-separated list of modifications, for example "itrac:1,Phosph:3,IodoAcet:15"
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsSeqInfo.MonoisotopicMass">
	<summary>
 Theoretical, monoisotopic mass (including the modified residues)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsSeqInfo.#ctor(System.Int32,System.Double)">
	<summary>
 Constructor using Sequence ID and mass
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsSeqInfo.#ctor(System.Int32,System.Double,System.Int32,System.String)">
	<summary>
 Constructor using Sequence ID, mass, mod count, and list of modifications
 </summary>
	<param name="SeqID">Sequence ID</param>
	<param name="MonoisotopicMass">Theoretical, monoisotopic mass (including the modified residues)</param>
	<param name="ModCount">Number of modifications</param>
	<param name="ModDescription">Comma-separated list of modifications, for example "itrac:1,Phosph:3,IodoAcet:15"</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsSeqInfo.UpdateMonoisotopicMass(System.Double)">
	<summary>
 Update the monoisotopic mass for this sequence
 </summary>
	<param name="MonoisotopicMass"></param>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsScanStatsReader.ErrorMessage">
	<summary>
 Error message
 </summary>
</member><member name="M:PHRPReader.clsScanStatsReader.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsScanStatsReader.ReadScanStatsData(System.String)">
	<summary>
 Open a tab-delimited _ScanStats.txt file and read the data
 </summary>
	<param name="strInputFilePath">Input file path</param>
	<returns>A Dictionary where keys are ScanNumber and values are clsScanStatsInfo objects</returns>
</member><member name="P:PHRPReader.clsExtendedScanStatsReader.ErrorMessage">
	<summary>
 Error message
 </summary>
</member><member name="M:PHRPReader.clsExtendedScanStatsReader.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsExtendedScanStatsReader.ReadExtendedScanStatsData(System.String)">
	<summary>
 Open a tab-delimited _ScanStatsEx.txt file and read the data
 </summary>
	<param name="strInputFilePath">Input file path</param>
	<returns>A Dictionary where keys are ScanNumber and values are clsScanStatsInfo objects</returns>
</member><member name="P:PHRPReader.clsPSM.AdditionalScores">
	<summary>
 Returns a dictionary with additional search engine scores stored as key/value pairs
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Update scores using SetScore</remarks>
</member><member name="P:PHRPReader.clsPSM.Charge">
	<summary>
 Assumed charge of the spectrum in which this peptide was identified
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.CleavageState">
	<summary>
 Peptide cleavage state (with regards to ProteinFirst)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.CollisionMode">
	<summary>
 Collision mode (CID, ETD, HCD)
 PepXML allows this to be CID, ETD, ECD, ETD/CID, or HCD
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.ElutionTimeMinutes">
	<summary>
 Elution time (in minutes) of the spectrum
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.MassErrorDa">
	<summary>
 Mass difference, in daltons, between the monoisotopic mass of the precursor ion and the calculated (theoretical) monoisotopic mass of the peptide
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.MassErrorPPM">
	<summary>
 Mass difference, in ppm, between the monoisotopic mass of the precursor ion and the calculated (theoretical) monoisotopic mass of the peptide
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.ModifiedResidues">
	<summary>
 List of modified residues
 </summary>
	<value></value>
	<returns></returns>
	<remarks>A given residue is allowed to have more than one modification</remarks>
</member><member name="P:PHRPReader.clsPSM.MSGFSpecProb">
	<summary>
 MSGF Spectral Probability associated with this peptide
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Ranges from 0 to 1, where 0 is the best score and 1 is the worse score</remarks>
</member><member name="P:PHRPReader.clsPSM.NumMissedCleavages">
	<summary>
 Number of missed cleavages (internal K or R)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.NumTrypticTerminii">
	<summary>
 Number of tryptic terminii (or similar if not using trypsin)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>2 means fully tryptic, 1 means partially tryptic, 0 means non-tryptic</remarks>
</member><member name="P:PHRPReader.clsPSM.Peptide">
	<summary>
 Peptide sequence, including any modification symbols that were assigned by the search engine
 For example, R.AAS*PQDLAGGYTSSLACHR.A
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.PeptideCleanSequence">
	<summary>
 Peptide residues without any modification symbols or flanking residues
 For example, AASPQDLAGGYTSSLACHR
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.PeptideMonoisotopicMass">
	<summary>
 Computed monoisotopic mass (uncharged, theoretical mass, including mods)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This mass is computed by PHRP using the PrecursorNeutralMass plus any modification masses associated with the peptide's residues</remarks>
</member><member name="P:PHRPReader.clsPSM.PeptideWithNumericMods">
	<summary>
 Peptide sequence where all modified residues have the modification masses displayed as numeric values
 For example, R.A+144.102063AS+79.9663PQDLAGGYTSSLAC+57.0215HR.A
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.ProteinFirst">
	<summary>
 First protein associated with this peptide
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Retrieve full list of proteins using the Proteins property</remarks>
</member><member name="P:PHRPReader.clsPSM.PrecursorNeutralMass">
	<summary>
 Uncharged monoisotopic mass of the precursor (observed mass based on m/z and charge)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This mass is based on the mass or m/z value reported by the search engine</remarks>
</member><member name="P:PHRPReader.clsPSM.Proteins">
	<summary>
 List of proteins associated with this peptide
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.ResultID">
	<summary>
 ResultID of this peptide (typically assigned by the search engine)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.ScanList">
	<summary>
 List of scans that were combined prior to identifying this peptide
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.ScanNumber">
	<summary>
 Scan number of the mass spectrum in which this peptide was identified
 Will automatically update ScanList if it does not yet contain this scan number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPSM.ScoreRank">
	<summary>
 Rank of this peptide in the given spectrum
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Top scoring peptide is rank 1, next lowest score is rank 2, etc.</remarks>
</member><member name="P:PHRPReader.clsPSM.SeqID">
	<summary>
 Sequence ID value assigned by PHRP
 Required for looking up information from the SeqInfo files
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.#ctor">
	<summary>
 Constructor; auto-calls Clear()
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.AddModifiedResidue(PHRPReader.clsAminoAcidModInfo)">
	<summary>
 Add the details for a modified residue
 </summary>
	<param name="objModInfo">Modification info class</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.AddModifiedResidue(System.Char,System.Int32,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,PHRPReader.clsModificationDefinition)">
	<summary>
 Add the details for a modified residue
 </summary>
	<param name="Residue">Amino acid letter; use angle brackets or square brackes for peptide or protein terminii (see the SYMBOL_DMS constants in clsAminoAcidModInfo)</param>
	<param name="ResidueLocInPeptide">Location of the residue in the peptide; use 1 for an N-terminal mod</param>
	<param name="ResidueTerminusState">Terminus state of residue</param>
	<param name="ModDefinition">Modification details</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.AddModifiedResidue(System.Char,System.Int32,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,PHRPReader.clsModificationDefinition,System.Int32)">
	<summary>
 Add the details for a modified residue
 </summary>
	<param name="Residue">Amino acid letter; use angle brackets or square brackes for peptide or protein terminii (see the SYMBOL_DMS constants in clsAminoAcidModInfo)</param>
	<param name="ResidueLocInPeptide">Location of the residue in the peptide; use 1 for an N-terminal mod</param>
	<param name="ResidueTerminusState">Terminus state of residue</param>
	<param name="ModDefinition">Modification details</param>
	<param name="EndResidueLocInPeptide">For ambiguous mods, the residue number of the last residue that could have this modification</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.AddProtein(System.String)">
	<summary>
 Add a new protein to associate with this peptide
 </summary>
	<param name="strProteinName"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.AddProteinDetail(PHRPReader.clsProteinInfo)">
	<summary>
 Add new detailed protein info for this peptide
 </summary>
	<param name="oProteinInfo"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.Clear">
	<summary>
 Reset the peptide to default values (and empty strings)
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.Clone">
	<summary>
 Duplicate this PSM object and return a new one
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.GetScore(System.String)">
	<summary>
 Returns the value stored for the specified score
 </summary>
	<param name="strScoreName">Score name</param>
	<returns>Score if defined, otherwise an empty string</returns>
</member><member name="M:PHRPReader.clsPSM.GetScoreDbl(System.String)">
	<summary>
  Returns the value stored for the specified score (as a double)
 </summary>
	<param name="strScoreName">Score name</param>
	<returns>Score if defined, otherwise 0</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.GetScoreDbl(System.String,System.Double)">
	<summary>
  Returns the value stored for the specified score (as a double)
 </summary>
	<param name="strScoreName">Score name</param>
	<param name="dblValueIfMissing">Value to return if the score is not defined</param>
	<returns>Score if defined, otherwise dblValueIfMissing</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.GetScoreInt(System.String)">
	<summary>
  Returns the value stored for the specified score (as an integer)
 </summary>
	<param name="strScoreName">Score name</param>
	<returns>Score if defined, otherwise 0</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.GetScoreInt(System.String,System.Int32)">
	<summary>
  Returns the value stored for the specified score (as an integer)
 </summary>
	<param name="strScoreName">Score name</param>
	<param name="intValueIfMissing">Value to return if the score is not defined</param>
	<returns>Score if defined, otherwise intValueIfMissing</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.SetPeptide(System.String,System.Boolean)">
	<summary>
 Update the peptide sequence, auto-determining the clean sequence if blnUpdateCleanSequence is true
 </summary>
	<param name="strPeptide">Peptide sequence (can optionally contain modification symbols; can optionally contain prefix and suffix residues)</param>
	<remarks>Does not update the cleavage state info.  If blnUpdateCleanSequence is false, then call UpdateCleanSequence at a later time to populate mPeptideCleanSequence</remarks>
</member><member name="M:PHRPReader.clsPSM.SetPeptide(System.String,PHRPReader.clsPeptideCleavageStateCalculator)">
	<summary>
 Update the peptide sequence (auto-determines the clean sequence); also auto-update the the cleavage state info
 </summary>
	<param name="strPeptide">Peptide sequence (can optionally contain modification symbols; can optionally contain prefix and suffix residues)</param>
	<param name="objCleavageStateCalculator">Cleavage state calculator object</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.SetScore(System.String,System.String)">
	<summary>
 Add/update an additional score to associate with this peptide
 </summary>
	<param name="strScoreName"></param>
	<param name="strScoreValue"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.TryGetScore(System.String,System.String@)">
	<summary>
 Returns the value stored for the specified score
 </summary>
	<param name="strScoreName"></param>
	<param name="strScoreValue"></param>
	<returns>True if the score is defined, otherwise false</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.UpdateCleavageInfo(PHRPReader.clsPeptideCleavageStateCalculator)">
	<summary>
 Auto-determine the number of missed cleavages, cleavage state, and number of tryptic terminii based on the peptide sequence
 </summary>
	<param name="objCleavageStateCalculator"></param>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPStartupOptions.MaxProteinsPerPSM">
	<summary>
 Maximum number of proteins to associate with each PSM
 </summary>
	<value></value>
	<returns></returns>
	<remarks>0 means to load all proteins</remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.#ctor(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFolderPath">Input file path</param>
	<param name="ePeptideHitResultType">Peptide Hit result type</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.#ctor(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFolderPath">Input file path</param>
	<param name="ePeptideHitResultType">Peptide Hit result type</param>
	<param name="strPHRPDataFileName">The base PHRP data file name; used when calling AutoSwitchToFHTIfRequired</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.#ctor(System.String,System.String,System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="strInputFolderPath">Input folder path</param>
	<param name="strResultToSeqMapFilename">ResultToSeqMap filename</param>
	<param name="strSeqInfoFilename">SeqInfo filename</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.GetProteinMapping(System.Collections.Generic.SortedList{System.Int32,System.Int32}@,System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.List{PHRPReader.clsProteinInfo}}@,System.Collections.Generic.SortedList{System.Int32,PHRPReader.clsSeqInfo}@)">
	<summary>
 Load the mapping between ResultID and Protein Name
 </summary>
	<param name="lstResultToSeqMap">ResultToSeqMap list (output); keys are ResultID, Values as SeqID</param>
	<param name="lstSeqToProteinMap">SeqToProteinMap list (output); keys are SeqID, Values are list of clsProteinInfo objects</param>
	<param name="lstSeqInfo">SeqInfo list (output); keys are SeqID, Values are seq details stored in clsSeqInfo objects</param>
	<returns>True if success, false if an error</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.GetProteinMapping(System.Collections.Generic.SortedList{System.Int32,System.Int32}@,System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.List{PHRPReader.clsProteinInfo}}@,System.Collections.Generic.SortedList{System.Int32,PHRPReader.clsSeqInfo}@,System.Collections.Generic.Dictionary{System.String,PHRPReader.clsPepToProteinMapInfo}@)">
	<summary>
 Load the mapping between ResultID and Protein Name
 </summary>
	<param name="lstResultToSeqMap">ResultToSeqMap list (output); keys are ResultID, Values as SeqID</param>
	<param name="lstSeqToProteinMap">SeqToProteinMap list (output); keys are SeqID, Values are list of clsProteinInfo objects</param>
	<param name="lstSeqInfo">SeqInfo list (output); keys are SeqID, Values are seq details stored in clsSeqInfo objects</param>
	<param name="lstPepToProteinMap">PepToProteinMap list (ouput); keys are clean peptide sequences (no mods), Values are Protein name and residue start/end locations for the peptide</param>
	<returns>True if success, false if an error</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.LoadPepToProtMapData(System.String,System.Collections.Generic.Dictionary{System.String,PHRPReader.clsPepToProteinMapInfo})">
	<summary>
 Load the Peptide to Protein mapping using the specified PHRP result file
 </summary>
	<param name="strFilePath"></param>
	<param name="lstPepToProteinMap">Peptide to protein mapping</param>
	<returns></returns>
	<remarks>The PepToProtMap file contains Residue_Start and Residue_End columns</remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.LoadResultToSeqMapping(System.String,System.Collections.Generic.SortedList{System.Int32,System.Int32})">
	<summary>
 Load the Result to Seq mapping using the specified PHRP result file
 </summary>
	<param name="strFilePath"></param>
	<param name="lstResultToSeqMap">Result to sequence mapping</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.LoadSeqInfo(System.String,System.Collections.Generic.SortedList{System.Int32,PHRPReader.clsSeqInfo})">
	<summary>
 Load the sequence info
 </summary>
	<param name="strFilePath"></param>
	<param name="lstSeqInfo">Sequences</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPSeqMapReader.LoadSeqToProteinMapping(System.String,System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.List{PHRPReader.clsProteinInfo}})">
	<summary>
 Load the Sequence to Protein mapping using the specified PHRP result file
 </summary>
	<param name="strFilePath"></param>
	<param name="lstSeqToProteinMap">Sequence to protein map</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserXTandem.#ctor(System.String,System.String)">
	<summary>
 Constructor; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserXTandem.#ctor(System.String,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">If True, then load the ModSummary file and SeqInfo files</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserXTandem.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserXTandem.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
	<summary>
 Determines the precursor mass tolerance
 </summary>
	<param name="objSearchEngineParams"></param>
	<param name="dblTolerancePPM">Precursor mass tolerance, in ppm</param>
	<returns>Precursor tolerance, in Da</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserXTandem.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified X!Tandem parameter file
 Note that the file specified by parameter "list path, default parameters" will also be auto-parsed (if found in folder mInputFolderPath)
 </summary>
	<param name="strSearchEngineParamFileName"></param>
	<param name="objSearchEngineParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserXTandem.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
</member><member name="M:PHRPReader.clsPHRPParserSequest.#ctor(System.String,System.String)">
	<summary>
 Constructor; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserSequest.#ctor(System.String,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">If True, then load the ModSummary file and SeqInfo files</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserSequest.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserSequest.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
	<summary>
 Determines the precursor mass tolerance
 </summary>
	<param name="objSearchEngineParams"></param>
	<param name="dblTolerancePPM">Precursor mass tolerance, in ppm</param>
	<returns>Precursor tolerance, in Da</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserSequest.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified Sequest parameter file
 </summary>
	<param name="strSearchEngineParamFileName"></param>
	<param name="objSearchEngineParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserSequest.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSGFDB.#ctor(System.String,System.String)">
	<summary>
 Constructor; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSGFDB.#ctor(System.String,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">If True, then load the ModSummary file and SeqInfo files</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSGFDB.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSGFDB.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
	<summary>
 Determines the precursor mass tolerance for either MSGF+ or MSPathFinder
 </summary>
	<param name="objSearchEngineParams"></param>
	<param name="dblTolerancePPM">Precursor mass tolerance, in ppm</param>
	<returns>Precursor tolerance, in Da</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSGFDB.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified MSGFDB (aka MS-GF+) parameter file
 </summary>
	<param name="strSearchEngineParamFileName"></param>
	<param name="objSearchEngineParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSGFDB.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
</member><member name="M:PHRPReader.clsPHRPParserInspect.#ctor(System.String,System.String)">
	<summary>
 Constructor; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserInspect.#ctor(System.String,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">If True, then load the ModSummary file and SeqInfo files</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserInspect.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserInspect.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
	<summary>
 Determines the precursor mass tolerance
 </summary>
	<param name="objSearchEngineParams"></param>
	<param name="dblTolerancePPM">Precursor mass tolerance, in ppm</param>
	<returns>Precursor tolerance, in Da</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserInspect.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified Inspect parameter file
 </summary>
	<param name="strSearchEngineParamFileName"></param>
	<param name="objSearchEngineParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserInspect.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
</member><member name="F:PHRPReader.clsPHRPReader.mFastReadMode">
	<summary>
 When set to true, then calls to MoveNext will read the next data line, but will skip several additional processing steps for performance reasons
 </summary>
	<remarks>If the peptide is a peptide of interest, then call FinalizeCurrentPSM</remarks>
</member><member name="P:PHRPReader.clsPHRPReader.CanRead">
	<summary>
 Returns True if the input file was successfully opened and data remains to be read
 </summary>
	<value></value>
	<returns>True if the file is readable</returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.CurrentPSM">
	<summary>
 Returns the most recently loaded PSM
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.CurrentPSMSeqInfo">
	<summary>
 Returns the most recently loaded PSM's sequence info (if available)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.DatasetName">
	<summary>
 Dataset name (auto-determined based on the input filename)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.EchoMessagesToConsole">
	<summary>
 If True, then will display messages at the console
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.ErrorMessages">
	<summary>
 Cached error messages
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.ErrorMessage">
	<summary>
 Current error message
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.FastReadMode">
	<summary>
 Used to enable fast read mode when calling MoveNext
 When FastReadMode is True, you should call FinalizeCurrentPSM after calling MoveNext to populate the remaining fields if the peptide is a peptide of interest
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Once FastReadMode is enabled it cannot be turned off (this is a safety measure due to how data is cached)</remarks>
</member><member name="P:PHRPReader.clsPHRPReader.LoadModsAndSeqInfo">
	<summary>
 If True, then looks for and loads the modification definitions from the _ModSummary.txt file associated with the input file
 Also reads the SeqInfo and related files
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.LoadMSGFResults">
	<summary>
 If true, then loads the MSGF SpecProb values from the _MSGF.txt file associated with the input file
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.LoadScanStatsData">
	<summary>
 If True, then loads the MASIC _ScanStats.txt file
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.MaxProteinsPerPSM">
	<summary>
 The maximum number of proteins that will be tracked for each PSM
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.ModSummaryFileLoaded">
	<summary>
 Returns True if the ModSummary file was successfully loaded
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.PeptideHitResultType">
	<summary>
 Peptide hit result type; Sequest, XTandem, Inspect, or MSGFDB
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.PercentComplete">
	<summary>
 Returns a number between 0 and 100 indicating the percentage of the source file that has been read
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.PHRPParser">
	<summary>
 Returns the PHRP Parser object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.ResultToSeqMap">
	<summary>
 Returns the cached mapping between ResultID and SeqID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.SeqInfo">
	<summary>
 Returns the cached sequence info, where key is SeqID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.SeqToProteinMap">
	<summary>
 Returns the cached sequence to protein map information
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.SkipDuplicatePSMs">
	<summary>
 When True, then skips near-duplicate lines in the PHRP data file (lines with the same peptide in the same scan, but different protein names)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.WarningMessages">
	<summary>
 Cached warning messages
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String)">
	<summary>
 Constructor that auto-determines the PeptideHit result type based on the filename
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<remarks>Sets LoadModSummaryFile to True and LoadMSGFResults to true</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
	<summary>
 Constructor where the PeptideHit result type is explicitly set
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="eResultType">Source file PeptideHit result type</param>
	<remarks>Sets LoadModSummaryFile to True and LoadMSGFResults to true</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,System.Boolean,System.Boolean)">
	<summary>
 Constructor that auto-determines the PeptideHit result type based on the filename
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="blnLoadModsAndSeqInfo">If True, then looks for and auto-loads the modification definitions from the _moddefs.txt file</param>
	<param name="blnLoadMSGFResults">If True, then looks for and auto-loads the MSGF results from the _msg.txt file</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Constructor that auto-determines the PeptideHit result type based on the filename
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="blnLoadModsAndSeqInfo">If True, then looks for and auto-loads the modification definitions from the _moddefs.txt file</param>
	<param name="blnLoadMSGFResults">If True, then looks for and auto-loads the MSGF results from the _msg.txt file</param>
	<param name="blnLoadScanStats">If True, then looks for and auto-loads the MASIC scan stats files (used to determine collision mode and to refine the precursor m/z values)</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor that auto-determines the PeptideHit result type based on the filename
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="oStartupOptions">Startup options</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean,System.Boolean)">
	<summary>
 Constructor where the PeptideHit result type is explicitly set
 </summary>
	<param name="strInputFilePath">Input file to read</param>
 ''' <param name="eResultType">Source file PeptideHit result type</param>
	<param name="blnLoadModsAndSeqInfo">If True, then looks for and auto-loads the modification definitions from the _moddefs.txt file</param>
	<param name="blnLoadMSGFResults">If True, then looks for and auto-loads the MSGF results from the _msg.txt file</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Constructor where the PeptideHit result type is explicitly set
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="eResultType">Source file PeptideHit result type</param>
	<param name="blnLoadModsAndSeqInfo">If True, then looks for and auto-loads the modification definitions from the _moddefs.txt file</param>
	<param name="blnLoadMSGFResults">If True, then looks for and auto-loads the MSGF results from the _msg.txt file</param>
	<param name="blnLoadScanStats">If True, then looks for and auto-loads the MASIC scan stats files (used to determine collision mode and to refine the precursor m/z values)</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor where the PeptideHit result type is explicitly set
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="eResultType">Source file PeptideHit result type</param>
	<param name="oStartupOptions">Startup options</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoSwitchToFHTIfRequired(System.String,System.String)">
	<summary>
 Updates strFilePath to have _fht instead of _syn if strFilePath contains_syn yet strBasePHRPFileName contains _fht
 </summary>
	<param name="strFilePath"></param>
	<param name="strBasePHRPFileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.ClearErrors">
	<summary>
 Clear any cached error messages
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.ClearWarnings">
	<summary>
 Clear any cached warning messages
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.InitializeClass(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Initialize the class
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="eResultType">Source file PeptideHit result type</param>
	<param name="oStartupOptions">Startup options</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String)">
	<summary>
 Looks for a valid _syn.txt or _fht.txt file for any dataset in the specified folder
 If both the _syn.txt and _fht.txt files are present, then chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
 </summary>
	<param name="strInputFolderPath">Input folder path</param>
	<returns>The full path to the most appropriate Synopsis or First hits file</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType@)">
	<summary>
 Looks for a valid _syn.txt or _fht.txt file for any dataset in the specified folder
 If both the _syn.txt and _fht.txt files are present, then chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
 </summary>
	<param name="strInputFolderPath">Input folder path</param>
	<param name="eMatchedResultType">Output parameter: the result type of the best result file found</param>
	<returns>The full path to the most appropriate Synopsis or First hits file</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.String)">
	<summary>
 Looks for a valid _syn.txt or _fht.txt file for the specified dataset in the specified folder
 If both the _syn.txt and _fht.txt files are present, then chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
 </summary>
	<param name="strInputFolderPath">Input folder path</param>
	<param name="strDatasetName">Dataset name</param>
	<returns>The full path to the most appropriate Synopsis or First hits file</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType@)">
	<summary>
 Looks for a valid _syn.txt or _fht.txt file for the specified dataset in the specified folder
 If both the _syn.txt and _fht.txt files are present, then chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
 </summary>
	<param name="strInputFolderPath">Input folder path</param>
	<param name="strDatasetName">Dataset name</param>
	<param name="eMatchedResultType">Output parameter: the result type of the best result file found</param>
	<returns>The full path to the most appropriate Synopsis or First hits file</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.Collections.Generic.List{System.String},PHRPReader.clsPHRPReader.ePeptideHitResultType@)">
	<summary>
 Looks for a valid _syn.txt or _fht.txt file for the given list of datasets in the specified folder
 If both the _syn.txt and _fht.txt files are present, then chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
 </summary>
	<param name="strInputFolderPath">Input folder path</param>
	<param name="lstDatasetNames">List of dataset names to search for</param>
	<param name="eMatchedResultType">Output parameter: the result type of the best result file found</param>
	<returns>The full path to the most appropriate Synopsis or First hits file</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineDatasetName(System.String)">
	<summary>
 Auto-determine the dataset name using the input file path
 </summary>
	<param name="strFilePath"></param>
	<returns>Dataset name</returns>
	<remarks>Returns an empty string if unable to determine the dataset name</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineDatasetName(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
	<summary>
 Auto-determine the dataset name using the input file path and specified PeptideHit result type
 </summary>
	<param name="strFilePath"></param>
	<param name="eResultType"></param>
	<returns>Dataset name</returns>
	<remarks>Returns an empty string if unable to determine the dataset name</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineResultType(System.String)">
	<summary>
 Determine the PeptideHit result type given the input file path
 </summary>
	<param name="strFilePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.ConvertModsToNumericMods(System.String,System.String@,System.Collections.Generic.List{PHRPReader.clsAminoAcidModInfo}@)">
	<summary>
 Look for dynamic mod symbols in the peptide sequence; replace with the corresponding mod masses
 Note that if the _SeqInfo.txt file is available, then this function will not be used
 </summary>
	<param name="strPeptide"></param>
	<param name="strPeptideWithNumericMods">Peptide with numeric mods (output)</param>
	<param name="lstPeptideMods">List of modified amino acids (output)</param>
	<returns>True if success, false if an error</returns>
	<remarks>strPeptideWithNumericMods will look like R.TDM+15.9949ESALPVTVLSAEDIAK.T</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetCollisionMode(System.String)">
	<summary>
 Determines the collision mode using the Scan Type name
 </summary>
	<param name="strScanTypeName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetMSGFFileName(System.String)">
	<summary>
 Returns the filename of the MSGF file that corresponds to strSynopsisOrFirstHitsFileName
 </summary>
	<param name="strSynopsisOrFirstHitsFileName">Filename (or full path) to the synopsis or first-hits file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPeptideHitResultType(System.String)">
	<summary>
 Get the peptide hit result type for the given result type name
 </summary>
	<param name="ResultTypeName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPAuxiliaryFileSuffixes">
	<summary>
 Get the list of auxiliary file suffixes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPFirstHitsFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default first-hits file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPModSummaryFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default ModSummary file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPPepToProteinMapFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default PepToProtMap file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPProteinModsFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default ProteinMods file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPSynopsisFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default Synopsis file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPResultToSeqMapFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default ResultToSeq Map file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPSeqInfoFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default SeqInfo file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetPHRPSeqToProteinMapFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default SeqToProtein Map file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetScanStatsFilename(System.String)">
	<summary>
 Get the ScanStats filename for the given dataset
 </summary>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetExtendedScanStatsFilename(System.String)">
	<summary>
 Get the extended ScanStats filename for the given dataset
 </summary>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetToolVersionInfoFilename(PHRPReader.clsPHRPReader.ePeptideHitResultType)">
	<summary>
 Get the tool version info filename for the given analysis tool
 </summary>
	<param name="eResultType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.IsLetterAtoZ(System.Char)">
	<summary>
 Returns true if the character is a letter between A and Z or a and z
 </summary>
	<param name="chChar">Character to examine</param>
	<returns></returns>
	<remarks>The Char.IsLetter() function returns True for "º" and various other Unicode ModifierLetter characters; use this function to only return True for normal letters between A and Z</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.IsNumber(System.String)">
	<summary>
 Examines the string to determine if it is numeric
 </summary>
	<param name="strData"></param>
	<returns>True if a number, otherwise false</returns>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnIndex(System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
	<summary>
 Returns the index of the indicated column, as tracked by objColumnHeaders
 </summary>
	<param name="strColumnName"></param>
	<param name="objColumnHeaders"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
	<summary>
 Returns the string stored in the given named column (using objColumnHeaders to dereference column name with column index)
 </summary>
	<returns>The text in the specified column; an empty string if the specific column name is not recognized</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.String)">
	<summary>
 Returns the string stored in the given named column (using objColumnHeaders to dereference column name with column index)
 </summary>
	<returns>The text in the specified column; strValueIfMissing if the specific column name is not recognized</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.Int32)">
	<summary>
 Returns the value stored in the given named column (using objColumnHeaders to dereference column name with column index)
 </summary>
	<returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.Double)">
	<summary>
 Returns the value stored in the given named column (using objColumnHeaders to dereference column name with column index)
 </summary>
	<returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.ParseColumnHeaders(System.String[],System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
	<summary>
 Updates the column name to column index mapping in objColumnHeaders
 </summary>
	<param name="strColumns">Column names read from the input file</param>
	<param name="objColumnHeaders">Column mapping dictionary object to update</param>
	<remarks>The SortedDictionary object should be instantiated using a case-insensitive comparer, i.e. (StringComparer.CurrentCultureIgnoreCase)</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.MoveNext">
	<summary>
 Reads the next line from a synopsis file or first hits file
 </summary>
	<returns>True if a line was read, false if not more data is available</returns>
	<remarks>When FastReadMode is True, you should call FinalizeCurrentPSM to populate the remaining fields if the peptide is a peptide of interest</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.FinalizeCurrentPSM">
	<summary>
 When FastReadMode is True, you first call MoveNext to read the peptide scores, then if the peptide
 is a peptide of interest, you call this function to finalize any processing steps that were skipped
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.ReadModSummaryFile(System.String,System.Collections.Generic.SortedDictionary{System.Char,PHRPReader.clsModificationDefinition},System.Collections.Generic.SortedDictionary{System.String,System.Collections.Generic.List{PHRPReader.clsModificationDefinition}})">
	<summary>
 Reads the data in strModSummaryFilePath.  Populates objDynamicMods and objStaticMods with the modification definitions
 </summary>
	<param name="strModSummaryFilePath">Path to the PHRP Mod Summary file to read</param>
	<param name="objDynamicMods">List with mod symbols as the key and the corresponding mod mass</param>
	<param name="objStaticMods">List with amino acid names as the key and the corresponding mod mass</param>
	<returns>True if success; false if an error</returns>
</member><member name="M:PHRPReader.clsPHRPParserMSPathFinder.#ctor(System.String,System.String)">
	<summary>
 Constructor; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSPathFinder.#ctor(System.String,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">If True, then load the ModSummary file and SeqInfo files</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSPathFinder.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSPathFinder.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified MSPathFinder parameter file
 </summary>
	<param name="strSearchEngineParamFileName"></param>
	<param name="objSearchEngineParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSPathFinder.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSAlign.#ctor(System.String,System.String)">
	<summary>
 Constructor; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSAlign.#ctor(System.String,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">If True, then load the ModSummary file and SeqInfo files</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSAlign.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSAlign.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
	<summary>
 Determines the precursor mass tolerance
 </summary>
	<param name="objSearchEngineParams"></param>
	<param name="dblTolerancePPM">Precursor mass tolerance, in ppm</param>
	<returns>Precursor tolerance, in Da</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSAlign.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified MSAlign parameter file
 </summary>
	<param name="strSearchEngineParamFileName"></param>
	<param name="objSearchEngineParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSAlign.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODPlus.#ctor(System.String,System.String)">
	<summary>
 Constructor; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODPlus.#ctor(System.String,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">If True, then load the ModSummary file and SeqInfo files</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODPlus.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODPlus.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified MODp parameter file
 </summary>
	<param name="strSearchEngineParamFileName"></param>
	<param name="objSearchEngineParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODPlus.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODa.#ctor(System.String,System.String)">
	<summary>
 Constructor; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODa.#ctor(System.String,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">If True, then load the ModSummary file and SeqInfo files</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODa.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODa.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
	<summary>
 Determines the precursor mass tolerance
 </summary>
	<param name="objSearchEngineParams"></param>
	<param name="dblTolerancePPM">Precursor mass tolerance, in ppm</param>
	<returns>Precursor tolerance, in Da</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODa.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified MODa parameter file
 </summary>
	<param name="strSearchEngineParamFileName"></param>
	<param name="objSearchEngineParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMODa.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
</member><member name="P:PHRPReader.clsPHRPParser.ErrorMessages">
	<summary>
 Cached error messages
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPParser.InputFilePath">
	<summary>
 Input file path
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPParser.InputFolderPath">
	<summary>
 Input folder path
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPParser.MaxProteinsPerPSM">
	<summary>
 Maximum number of proteins to associate with each PSM
 </summary>
	<value></value>
	<returns></returns>
	<remarks>0 means to load all proteins</remarks>
</member><member name="P:PHRPReader.clsPHRPParser.PeptideHitResultType">
	<summary>
 Peptide hit result type; Sequest, XTandem, Inspect, or MSGFDB
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPParser.ResultToSeqMap">
	<summary>
 Returns the cached mapping between ResultID and SeqID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPParser.SeqInfo">
	<summary>
 Returns the cached sequence info, where key is SeqID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPParser.SeqToProteinMap">
	<summary>
 Returns the cached sequence to protein map information
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPParser.WarningMessages">
	<summary>
 Cached warning messages
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParser.#ctor(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean)">
	<summary>
 Initialize the parser for the given dataset, input file, and result type
 </summary>
	<param name="strDatasetName">Dataset Name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="ePeptideHitResultType">Peptide Hit Results file type</param>
	<param name="blnLoadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
	<remarks>If strInputFilePath is an empty string, then the functions that solely depend on dataset name will be callable, but data related functions will not be callable</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.#ctor(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Initialize the parser for the given dataset, input file, and result type
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and mMaxProteinsPerPSM</param>
	<remarks>If strInputFilePath is an empty string, then the functions that solely depend on dataset name will be callable, but data related functions will not be callable</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.InitializeParser(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsPHRPStartupOptions)">
	<summary>
 Initialize the parser for the given dataset and input file
 </summary>
	<param name="strDatasetName">Dataset Name</param>
	<param name="strInputFilePath">Input file path</param>
	<param name="ePeptideHitResultType">Peptide Hit Results file type</param>
	<param name="startupOptions">Startup options</param>
	<remarks>If strInputFilePath is an empty string, then the functions that solely depend on dataset name will be callable, but data related functions will not be callable
 startupOptions.LoadModsAndSeqInfo controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read
 Setting startupOptions.MaxProteinsPerPSM to a non-zero value will limit the number of proteins that are tracked
 </remarks>
</member><member name="M:PHRPReader.clsPHRPParser.GetParser(System.String)">
	<summary>
 Returns the appropriate PHRPParser class based on the input file name; assumes blnLoadModsAndSeqInfo=True
 </summary>
	<param name="strInputFilePath">Input file path</param>
	<remarks>Throws an exception if unable to auto-determine the input file type or dataset name from strInputFilePath</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.GetParser(System.String,System.Boolean)">
	<summary>
 Returns the appropriate PHRPParser class based on the input file name
 </summary>
	<param name="strInputFilePath">Input file path</param>
	<param name="blnLoadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
	<remarks>Throws an exception if unable to auto-determine the input file type or dataset name from strInputFilePath</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.GetParser(System.String,System.String,System.Boolean)">
	<summary>
 Returns the appropriate PHRPParser class based on the input file name
 </summary>
	<param name="strInputFilePath">Input file path</param>
 ''' <param name="strDatasetName">Dataset Name</param>
	<param name="blnLoadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
	<remarks>Throws an exception if unable to auto-determine the input file type from strInputFilePath</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.GetParser(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean)">
	<summary>
 Returns the appropriate PHRPParser class based on ePeptideHitResultType
 </summary>
	<param name="strInputFilePath">Input file path</param>
	<param name="strDatasetName">Dataset Name</param>
	<param name="ePeptideHitResultType">Peptide Hit Results file type</param>
	<param name="blnLoadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParser.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<returns>True if success, false if an error</returns>
</member><member name="M:PHRPReader.clsPHRPParser.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<param name="fastReadMode">When set to true, then reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
	<returns>True if success, false if an error</returns>
	<remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields if the peptide is a peptide of interest</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
	<summary>
 Parses the specified parameter file
 Also reads the Tool_Version_Info file in the same folder (if present)
 </summary>
	<param name="strSearchEngineParamFileName">Name of the parameter file to parse (must reside in InputFolderPath)</param>
	<param name="objSearchEngineParams">Search engine parameters class (output)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParser.ClearErrors">
	<summary>
 Clear any cached error messages
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParser.ClearWarnings">
	<summary>
 Clear any cached warning messages
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParser.ExtractAmbiguousMods(System.String)">
	<summary>
 Look for ambiguous mods in strSequenceWithMods
 For example, -30.09 in I.(TIIQ)[-30.09]APQGVSLQYTSR.Q
 </summary>
	<param name="strSequenceWithMods"></param>
	<returns></returns>
	<remarks>List of ambiguous mods, where the keys are the start residues and the values are the ambiguous mod info</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.LoadModSummary">
	<summary>
 Reads the data in strModSummaryFilePath.  Populates mModInfo with the modification names, masses, and affected residues
 </summary>
	<returns>True if success; false if an error</returns>
</member><member name="M:PHRPReader.clsPHRPParser.NumToStringPlusMinus(System.Double,System.Int32)">
	<summary>
 Formats a number so that it begins with a + sign if positive or a - sign if negative
 Rounds the number to the specified number of digits, trimming off trailing zeros
 Example output: +79.9663 or -17.016
 </summary>
	<param name="Value"></param>
	<param name="DigitsOfPrecision"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParser.ParseColumnHeaders(System.String[])">
	<summary>
 Parse the column names in strSplitLine and update the local column header mapping
 </summary>
	<param name="strSplitLine"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParser.ParseKeyValueSetting(System.String,System.Char)">
	<summary>
 Splits strText on strText, returning a KeyValuePair object where the key is the text to the left of the delimiter and the value is the text to the right
 </summary>
	<param name="strText"></param>
	<param name="chDelimiter"></param>
	<returns>KeyValuePair with key and value from strText; key and value will be empty if chDelimiter was not found</returns>
	<remarks>Automatically trims whitespace</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.ParseKeyValueSetting(System.String,System.Char,System.String)">
	<summary>
 Splits strText on strText, returning a KeyValuePair object where the key is the text to the left of the delimiter and the value is the text to the right
 </summary>
	<param name="strText"></param>
	<param name="chDelimiter"></param>
	<param name="strCommentChar">If defined, then looks for this character in the value portion of the setting and removes that character plus any text after it</param>
	<returns>KeyValuePair with key and value from strText; key and value will be empty if chDelimiter was not found</returns>
	<remarks>Automatically trims whitespace</remarks>
</member><member name="M:PHRPReader.clsPHRPParser.UpdatePSMUsingSeqInfo(PHRPReader.clsPSM)">
	<summary>
 Updates the theoretical (computed) monoisotopic mass of objPSM using mResultToSeqMap and mSeqInfo
 Also updates the modification info
 Also updates SeqID
 </summary>
	<param name="objPSM"></param>
	<returns>True if success, False if objPSM.ResultID is not found in mResultToSeqMap</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPModSummaryReader.GetModificationMassAsText(System.String)">
	<summary>
 Returns the mass value associated with the given mass correction tag
 </summary>
	<param name="strMassCorrectionTag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:PHRPReader.clsPepToProteinMapInfo.mProteinMapInfo">
	<summary>
 Dictionary of protein names and residue start/end positions
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMass(System.String)">
	<summary>
 Compute the mass of peptide sequence strSequence.  If modification symbols are present, returns -1
 </summary>
	<param name="strSequence"></param>
	<returns></returns>
	<remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMass(System.String,System.Int32,PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType[]@)">
	<summary>
 Compute the mass of peptide sequence strSequence; uses the information in udtResidueModificationInfo() to determine modification masses
 </summary>
	<param name="strSequence"></param>
	<returns></returns>
	<remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMassNumericMods(System.String)">
	<summary>
 Compute the mass of peptide sequence strSequence.  Supports peptide sequences with with numeric mod masses
 Examples of numeric mods:
  R.A+144.102063AS+79.9663PQDLAGGYTSSLAC+57.0215HR.A
  K.Q-17.0265QIEESTSDYDKEK.L
 </summary>
	<param name="strSequence"></param>
	<returns></returns>
	<remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ConvoluteMass(System.Double,System.Int32,System.Int32)">
	<summary>
 Converts the m/z value from one charge state to another charge state.  Either charge state can be 0, which means an uncharged peptide
 </summary>
	<param name="dblMassMZ"></param>
	<param name="intCurrentCharge"></param>
	<param name="intDesiredCharge"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.GetAminoAcidAtomCounts(System.Char)">
	<summary>
 Returns a structure with the number of atoms of C, H, N, O, and S in the specified amino acid
 </summary>
	<param name="chAminoAcidSymbol"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.GetAminoAcidMass(System.Char)">
	<summary>
 Returns the mass of the specified amino acid
 </summary>
	<param name="chAminoAcidSymbol"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.MassToPPM(System.Double,System.Double)">
	<summary>
 Converts dblMassToConvert to ppm, based on the value of dblCurrentMZ
 </summary>
	<param name="dblMassToConvert"></param>
	<param name="dblCurrentMZ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.MHToMonoisotopicMass(System.Double)">
	<summary>
 Converts and MH mass to the uncharged (neutral) mass
 </summary>
	<param name="dblMH"></param>
	<returns></returns>
	<remarks>Equivalent to ConvoluteMass(dblMH, 1, 0)</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.MonoisotopicMassToMZ(System.Double,System.Int32)">
	<summary>
 Converts an uncharged (neutral) mass to the m/z value for the specified charge
 </summary>
	<param name="dblMonoisotopicMass"></param>
	<param name="intDesiredCharge"></param>
	<returns></returns>
	<remarks>Equivalent to ConvoluteMass(dblMonoisotopicMass, 0, intDesiredCharge)</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.PPMToMass(System.Double,System.Double)">
	<summary>
 Converts from a ppm value to a mass value, using the specified m/z as a reference point
 </summary>
	<param name="dblPPMToConvert"></param>
	<param name="dblCurrentMZ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ResetTerminusMasses">
	<summary>
 Reset the N and C terminus default mass values
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.SetAminoAcidAtomCounts(System.Char,PHRPReader.clsPeptideMassCalculator.udtAtomCountsType)">
	<summary>
 Defines the number of C, H, N, O, and S atoms in an amino acid
 </summary>
	<param name="chAminoAcidSymbol"></param>
	<param name="udtAtomCounts"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.SetAminoAcidMass(System.Char,System.Double)">
	<summary>
 Defines a custom mass for an amino acid
 </summary>
	<param name="chAminoAcidSymbol"></param>
	<param name="dblMass"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.CleavageStateToShort(PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants)">
	<summary>
 Converts Cleavage State to 0, 1, or 2
 </summary>
	<param name="eCleavageState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeCleavageState(System.String)">
	<summary>
 Determines the cleavage state of the specified peptide
 </summary>
	<param name="strSequenceWithPrefixAndSuffix"></param>
	<returns></returns>
	<remarks>Peptide can have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeCleavageState(System.String,System.String,System.String)">
	<summary>
 Determines the cleavage state of the specified peptide
 </summary>
	<param name="strCleanSequence"></param>
	<param name="strPrefixResidues"></param>
	<param name="strSuffixResidues"></param>
	<returns></returns>
	<remarks>Peptide cannot have prefix and suffix letters, and thus must be in the form PEPTIDE</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeNumberOfMissedCleavages(System.String)">
	<summary>
 Count the number of missed cleavages in the peptide
 </summary>
	<param name="strSequenceWithPrefixAndSuffix"></param>
	<returns></returns>
	<remarks>Peptide can have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.String)">
	<summary>
 Determine the terminus state of the peptide
 </summary>
	<param name="strSequenceWithPrefixAndSuffix"></param>
	<returns></returns>
	<remarks>Peptide must have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.Char,System.Char)">
	<summary>
 Determine the terminus state given the prefix and suffix characters
 </summary>
	<param name="chPrefix"></param>
	<param name="chSuffix"></param>
	<returns></returns>
	<remarks>For example, if the peptide is -.PEPTIDE.G then pass chPrefix="-" and chSuffix="G"</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.String,System.String,System.String)">
	<summary>
 Determine the terminus state of the peptide
 </summary>
	<param name="strCleanSequence"></param>
	<param name="strPrefixResidues"></param>
	<param name="strSuffixResidues"></param>
	<returns></returns>
	<remarks>Peptide cannot have prefix and suffix letters, and thus must be in the form PEPTIDE</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ExtractCleanSequenceFromSequenceWithMods(System.String,System.Boolean)">
	<summary>
 Removes all modification symbols (*, #, +, 8, etc.) from the peptide; optionally removes prefix and suffix letters
 </summary>
	<param name="strSequenceWithMods"></param>
	<param name="blnCheckForPrefixAndSuffixResidues"></param>
	<returns>Clean peptide sequence</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.GetDefaultEnzymeMatchSpec">
	<summary>
 Returns the default enzyme RegEx match specifications
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SetEnzymeMatchSpec(System.String,System.String)">
	<summary>
 Define custom enzyme match rules using RegEx strings
 </summary>
	<param name="strLeftResidueRegEx"></param>
	<param name="strRightResidueRegEx"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SetStandardEnzymeMatchSpec(PHRPReader.clsPeptideCleavageStateCalculator.eStandardCleavageAgentConstants)">
	<summary>
 Select a standard enzyme match rule
 </summary>
	<param name="eStandardCleavageAgent"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SplitPrefixAndSuffixFromSequence(System.String,System.String@,System.String@,System.String@)">
	<summary>
 Examines strSequenceIn and splits apart into prefix, primary sequence, and suffix
 </summary>
	<param name="strSequenceIn">Peptide sequence to examine</param>
	<param name="strPrimarySequence">Primary sequence (output)</param>
	<param name="strPrefix">Prefix residue (output)</param>
	<param name="strSuffix">Suffix residue (output)</param>
	<returns> Returns True if success, False if prefix and suffix residues were not found</returns>
	<remarks>If more than one character is present before the first period or after the last period, then all characters are returned
 If the peptide starts with ".." then it is auto-changed to start with "."
 If the peptide ends with ".." then it is auto-changed to end with "."
 </remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.TestCleavageRule(System.Char,System.Char)">
	<summary>
 Examines the two residues to see if they represent an expected cleavage point
 </summary>
	<param name="chLeftChar"></param>
	<param name="chRightChar"></param>
	<returns>True if the characters match the currently defined cleavage rule</returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsMSGFResultsReader.ErrorMessage">
	<summary>
 Error message
 </summary>
</member><member name="M:PHRPReader.clsMSGFResultsReader.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsMSGFResultsReader.ReadMSGFData(System.String)">
	<summary>
 Open a tab-delimited MSGF results file and read the data
 </summary>
	<param name="strInputFilePath">Input file path</param>
	<returns>A Dictionary where keys are ResultID and values are MSGF_SpecProb values (stored as strings)</returns>
</member><member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.UnknownType">
	<summary>
 Unknown mod type on a residue; essentially treated as a dynamic mod
 </summary>
	<remarks></remarks>
</member><member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.DynamicMod">
	<summary>
 Dynamic mod on a residue or peptide terminus; supported by Sequest and notated via a modification symbol; this mod is explicitly notated by X!Tandem; if a terminus mod, then the mod symbol is associated with the first or last residue in the peptide
 </summary>
	<remarks></remarks>
</member><member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.StaticMod">
	<summary>
 Static mod on a residue or peptide terminus; supported by Sequest but not explicitly notated; this mod is explicitly notated by X!Tandem; if a terminus mod, then the mod symbol is associated with the first or last residue in the peptide
 </summary>
	<remarks></remarks>
</member><member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.TerminalPeptideStaticMod">
	<summary>
 Peptide terminus static mod (DMS Symbol is T); used by Sequest and MSGFDB; note that terminal mods are always dynamic in X!Tandem
 </summary>
	<remarks></remarks>
</member><member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.IsotopicMod">
	<summary>
 Isotopic mod, e.g. N15, or C13; supported by Sequest; most likely not supported by XTandem
 </summary>
	<remarks></remarks>
</member><member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.ProteinTerminusStaticMod">
	<summary>
 Protein terminus static mod; supported by Sequest; this mod is also supported by X!Tandem but modified residues are not explicitly notated; instead, all peptides have their mass implicitly modified by this amount
 </summary>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.ModificationSymbol">
	<summary>
 One letter symbol for this modification
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
 Use NO_SYMBOL_MODIFICATION_SYMBOL (a dash) if no symbol 
 (necessary for isotopic mods or protein terminus static mods)
 </remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.ModificationMass">
	<summary>
 Monoisotopic modification mass
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.ModificationMassAsText">
	<summary>
 Modification mass, stored as text
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Represents the original string value read from the data file</remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.TargetResidues">
	<summary>
 Residues that this modification can apply to
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
 If an empty string, then the modification can apply to any residue or terminus; 
 Otherwise, should contain a space-free, comma-free list of one letter amino acid residue symbols that this mod can apply to.
 Use the *_SYMBOL_DMS constants for the peptide and protein terminii symbols 
 (less than and greater than signs for the peptide terminii; [ and ] for the protein terminii)
 </remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.ModificationType">
	<summary>
 Modification type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.MassCorrectionTag">
	<summary>
 Modification name, for example Phosph, IodoAcet, Plus1Oxy, or Methyl 
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Maximum length is 8 characters; cannot contain a colon, comma, or space</remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.AffectedAtom">
	<summary>
 Only used with Isotopic modifications, indicating the atom affected (e.g. C, H, N, O, or S)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
 Set to Nothing or to clsPeptideMassCalculator.NO_AFFECTED_ATOM_SYMBOL (a dash) for positional modifications 
 (including terminus modifications)
 </remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.OccurrenceCount">
	<summary>
 Number of times this modification was observed in the given dataset
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsModificationDefinition.UnknownModAutoDefined">
	<summary>
 True if this was an unknown mass that was auto defined
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.Clear">
	<summary>
 Initialize the modification definition
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.EquivalentMassTypeTagAndAtom(PHRPReader.clsModificationDefinition)">
	<summary>
 Compares objB to this object, ignoring .ModificationSymbol and ignoring .AffectedResidues
 </summary>
	<param name="objB"></param>
	<returns>True if the items are equivalent</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.EquivalentMassTypeTagAndAtom(PHRPReader.clsModificationDefinition,PHRPReader.clsModificationDefinition)">
	<summary>
 Compare objA to objB but ignore .ModificationSymbol and .AffectedResidues
 </summary>
	<param name="objA"></param>
	<param name="objB"></param>
	<returns>True if the items are equivalent</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.EquivalentMassTypeTagAtomAndResidues(PHRPReader.clsModificationDefinition)">
	<summary>
 Compares objB to this object, ignoring .ModificationSymbol
 </summary>
	<param name="objB"></param>
	<returns>True if the items are equivalent</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.EquivalentMassTypeTagAtomAndResidues(PHRPReader.clsModificationDefinition,PHRPReader.clsModificationDefinition)">
	<summary>
 Compares objB to this object
 </summary>
	<param name="objA"></param>
	<param name="objB"></param>
	<returns>True if the items are equivalent</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.EquivalentTargetResidues(System.String,System.String,System.Boolean)">
	<summary>
 Compare the residue lists (ignoring order)
 </summary>
	<param name="strResidues1"></param>
	<param name="strResidues2"></param>
	<param name="blnAllowResidues2ToBeSubsetOfResidues1"></param>
	<returns>True if they contain the same residues</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.CanAffectPeptideOrProteinTerminus">
	<summary>
 Returns True if this modification can affect the peptide or protein terminus
 Note that some modifications can affect either peptide teriminii or internal residues
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.CanAffectPeptideResidues">
	<summary>
 Returns true if this modification can affect peptide residues
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.GetTerminalSymbols">
	<summary>
 Retrieve the protein and peptide terminus symbols
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.ModificationSymbolToModificationType(System.Char)">
	<summary>
 Retrieve the modification type for the given modification type symbol
 </summary>
	<param name="chModificationTypeSymbol">D, S, T, I, or P</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.ModificationTypeToModificationSymbol(PHRPReader.clsModificationDefinition.eModificationTypeConstants)">
	<summary>
 Retrieve the modification type symbol for the given modification Type
 </summary>
	<param name="eModificationType"></param>
	<returns>D, S, T, I, or P</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsModificationDefinition.TargetResiduesContain(System.Char)">
	<summary>
 Check whether the target residues contain the given residue
 </summary>
	<param name="chComparisonResidue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsAminoAcidModInfo.AmbiguousMod">
	<summary>
 True if the location of the modification is ambiguous
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsAminoAcidModInfo.EndResidueLocInPeptide">
	<summary>
 For ambiguous mods, indicates the last residue on which the mod could appear.  For non-ambiguous mods, whill be the same as ResidueLocInPeptide
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsAminoAcidModInfo.ResidueLocInPeptide">
	<summary>
 Indicates the residue number modified; the first residue is at position 1
 </summary>
	<value></value>
	<returns></returns>
	<remarks>For ambiguous mods, indicates the first residue on which the mod could appear</remarks>
</member>
</members>
</doc>